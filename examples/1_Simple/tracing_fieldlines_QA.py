#!/usr/bin/env python3

"""
This example demonstrates how to use SIMSOPT to compute Poincare plots.

This example also illustrates how the coil shapes resulting from a
simsopt stage-2 optimization can be loaded in to another script for
analysis.  The coil shape data used in this script,
``inputs/biot_savart_opt.json``, can be re-generated by running the
example 2_Intermediate/stage_two_optimization.py.

This example takes advantage of MPI if you launch it with multiple
processes (e.g. by mpirun -n or srun), but it also works on a single
process.
"""

import time
import os
import logging
from pathlib import Path
import numpy as np

import simsopt
from simsopt.field import (SurfaceClassifier, SimsoptFieldlineIntegrator, ScipyFieldlineIntegrator, PoincarePlotter)
from simsopt.geo import SurfaceRZFourier
from simsopt.util import in_github_actions, proc0_print, comm_world
from simsopt.geo import plot

proc0_print("Running 1_Simple/tracing_fieldlines_QA.py")
proc0_print("=========================================")

logging.basicConfig()
logger = logging.getLogger('simsopt.field.tracing')
logger.setLevel(1)

# If we're in the CI, make the run a bit cheaper:
nfieldlines = 3 if in_github_actions else 10
n_transits = 50 if in_github_actions else 100
tmax_fl = 10000 if in_github_actions else 20000
degree = 2 if in_github_actions else 4

# Directory for output
OUT_DIR = "./output/"
os.makedirs(OUT_DIR, exist_ok=True)

# Load in the boundary surface:
TEST_DIR = (Path(simsopt.__file__).parent / ".." / ".." / "tests" / "test_files").resolve()
filename = TEST_DIR / 'input.LandremanPaul2021_QA'
# Note that the range must be "full torus"!
surf = SurfaceRZFourier.from_vmec_input(filename, nphi=200, ntheta=30, range="full torus")
nfp = surf.nfp

# Load in the optimized coils from stage_two_optimization.py:
coils_filename = Path(simsopt.__file__).parent / ".." / ".." / "examples" / "1_Simple" / "inputs" / "biot_savart_opt.json"
bs = simsopt.load(coils_filename)

integrator = ScipyFieldlineIntegrator(bs, comm=comm_world, nfp=nfp, stellsym=True)

# create a Poincare plotter object, which can compute and plot Poincare sections
start_points_poincare_RZ = np.linspace(np.array([1.2125346, 0.0]), np.array([1.295, 0.0]), nfieldlines)

poincare = PoincarePlotter(integrator, start_points_poincare_RZ, phis=4, n_transits=n_transits, add_symmetry_planes=True)


surf.to_vtk(OUT_DIR + 'surface')
sc_fieldline = SurfaceClassifier(surf, h=0.03, p=2)
sc_fieldline.to_vtk(OUT_DIR + 'levelset', h=0.02)

# Plot the phi=0 plane:
fig1, ax = poincare.plot_poincare_single(0)
# Plot all planes in a multi-panel figure:
fig2, ax = poincare.plot_poincare_all()
# the poincareplotter has an attribute that can help such that only the plotting process does things.
if poincare.i_am_the_plotter:
    fig1.savefig(OUT_DIR + 'QA_poincare_phi0.png')
    fig2.savefig(OUT_DIR + 'QA_poincare_all.png')

# create a 3D plot to see the coils and the fieldlines together: 
if not in_github_actions:
    if poincare.i_am_the_plotter:
        plot(bs.coils, engine='mayavi', show=False, tube_radius=0.01)
    poincare.plot_fieldline_trajectories_3d(engine='mayavi', show=False, tube_radius=0.001, opacity=0.3)
    poincare.plot_poincare_in_3d(engine='mayavi', show=True, scale_factor=0.01)
    




proc0_print("End of 1_Simple/tracing_fieldlines_QA.py")
proc0_print("========================================")
